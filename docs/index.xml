<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Crunchy Data Container Suite on Crunchy Data Container Suite Documentation</title>
    <link>https://crunchydata.github.io/crunchy-containers/</link>
    <description>Recent content in Crunchy Data Container Suite on Crunchy Data Container Suite Documentation</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 23 Apr 2018 14:52:09 -0700</lastBuildDate>
    
	<atom:link href="https://crunchydata.github.io/crunchy-containers/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>crunchy-postgres</title>
      <link>https://crunchydata.github.io/crunchy-containers/container-specifications/crunchy-postgres/</link>
      <pubDate>Thu, 24 May 2018 09:38:13 -0700</pubDate>
      
      <guid>https://crunchydata.github.io/crunchy-containers/container-specifications/crunchy-postgres/</guid>
      <description>PostgreSQL (pronounced &amp;ldquo;post-gress-Q-L&amp;rdquo;) is an open source, ACID compliant, relational database management system (RDBMS) developed by a worldwide team of volunteers. The crunchy-postgres container image is unmodified, open source PostgreSQL packaged and maintained by professionals.
Features The following features are supported by the crunchy-postgres container:
 Kubernetes and OpenShift secrets Backup and restoration from various tools: pgbackrest, pg_basebackup and pg_dump/pg_restore. Custom mounted configuration files (see below) Async and Sync Replication  Packages The crunchy-postgres Docker image contains the following packages (versions vary depending on PostgreSQL version):</description>
    </item>
    
    <item>
      <title>Environment Setup</title>
      <link>https://crunchydata.github.io/crunchy-containers/installation/environment-setup/</link>
      <pubDate>Tue, 08 May 2018 08:52:09 -0700</pubDate>
      
      <guid>https://crunchydata.github.io/crunchy-containers/installation/environment-setup/</guid>
      <description>Table of Contents Requirements Project Environment Installing Requirements CentOS 7 RHEL 7 PostgreSQL Docker OpenShift Kubernetes Helm   Creating a Demo Namespace Kubernetes OpenShift   Next Steps   v2.0, 2018-07-21
 Requirements The Crunchy Container Suite can run on different environments including:
   Docker 1.12+
  OpenShift Container Platform 3.6+
  Kubernetes 1.8+
   In this document we list the basic installation steps required for these environments.</description>
    </item>
    
    <item>
      <title>crunchy-postgres-gis</title>
      <link>https://crunchydata.github.io/crunchy-containers/container-specifications/crunchy-postgres-gis/</link>
      <pubDate>Thu, 24 May 2018 09:51:16 -0700</pubDate>
      
      <guid>https://crunchydata.github.io/crunchy-containers/container-specifications/crunchy-postgres-gis/</guid>
      <description>PostgreSQL (pronounced &amp;ldquo;post-gress-Q-L&amp;rdquo;) is an open source, ACID compliant, relational database management system (RDBMS) developed by a worldwide team of volunteers. The crunchy-postgres-gis container image is unmodified, open source PostgreSQL packaged and maintained by professionals. This image is identical to the crunchy-postgres image except it includes the open source geospatial extension PostGIS for PostgreSQL in addition to the language extension PL/R which allows for writing functions in the R statistical computing language.</description>
    </item>
    
    <item>
      <title>Build the Containers</title>
      <link>https://crunchydata.github.io/crunchy-containers/installation/build-the-containers/</link>
      <pubDate>Tue, 08 May 2018 08:52:16 -0700</pubDate>
      
      <guid>https://crunchydata.github.io/crunchy-containers/installation/build-the-containers/</guid>
      <description>Table of Contents Build the Containers Next Steps   v2.0, 2018-07-21
 Build the Containers At this point, you have a decision to make - either download prebuilt containers from Dockerhub, or build the containers on your local host.
 To download the prebuilt containers, make sure you can login to Dockerhub, and then run the following:
 docker login cd $CCPROOT ./bin/pull-from-dockerhub.sh   Or if you&amp;#8217;d rather build the containers from source, perform a container build as follows:</description>
    </item>
    
    <item>
      <title>crunchy-backup</title>
      <link>https://crunchydata.github.io/crunchy-containers/container-specifications/crunchy-backup/</link>
      <pubDate>Thu, 24 May 2018 10:06:08 -0700</pubDate>
      
      <guid>https://crunchydata.github.io/crunchy-containers/container-specifications/crunchy-backup/</guid>
      <description>The crunchy-backup container executes a full backup against another database container using the standard pg_basebackup utility that is included with PostgreSQL.
Features The following features are supported by the crunchy-backup container:
 Backup and restoration from: pg_basebackup  Packages The crunchy-backup Docker image contains the following packages (versions vary depending on PostgreSQL version):
 PostgreSQL (9.5.13, 9.6.9 and 10.4) CentOS7 - publicly available RHEL7 - customers only  Environment Variables Required    Name Default Description     BACKUP_LABEL crunchy-backup The label for the backup.</description>
    </item>
    
    <item>
      <title>Storage Configuration</title>
      <link>https://crunchydata.github.io/crunchy-containers/installation/storage-configuration/</link>
      <pubDate>Tue, 08 May 2018 08:52:46 -0700</pubDate>
      
      <guid>https://crunchydata.github.io/crunchy-containers/installation/storage-configuration/</guid>
      <description>Table of Contents Available Storage Types HostPath NFS Dynamic Storage Next Steps   v2.0, 2018-07-21
 Available Storage Types The Container Suite is tested on 3 different storage backends:
   hostPath (single node testing)
  NFS (single and multi-node testing)
  Gluster (dynamic storage on separate Gluster cluster)
   Other storage backends work as well including GCE, EBS, ScaleIO, and others, but may require you to modify various examples or configuration.</description>
    </item>
    
    <item>
      <title>crunchy-backrest-restore</title>
      <link>https://crunchydata.github.io/crunchy-containers/container-specifications/crunchy-backrest-restore/</link>
      <pubDate>Thu, 24 May 2018 12:06:26 -0700</pubDate>
      
      <guid>https://crunchydata.github.io/crunchy-containers/container-specifications/crunchy-backrest-restore/</guid>
      <description>The crunchy-backrest-restore container executes the pgBackRest utility, allowing FULL and DELTA restore capability. See the pgBackRest guide for more details.
Features The following features are supported and required by the crunchy-backrest-restore container:
 Mounted pgbackrest.conf configuration file via the /pgconf volume Mounted /backrestrepo for access to pgBackRest archives  Packages The crunchy-backrest-restore Docker image contains the following packages (versions vary depending on PostgreSQL version):
 PostgreSQL (9.5.13, 9.6.9 and 10.</description>
    </item>
    
    <item>
      <title>crunchy-pgdump</title>
      <link>https://crunchydata.github.io/crunchy-containers/container-specifications/crunchy-pgdump/</link>
      <pubDate>Thu, 24 May 2018 12:08:16 -0700</pubDate>
      
      <guid>https://crunchydata.github.io/crunchy-containers/container-specifications/crunchy-pgdump/</guid>
      <description>The crunchy-pgdump container executes either a pg_dump or pg_dumpall database backup against another PostgreSQL database.
Packages The crunchy-pgdump Docker image contains the following packages (versions vary depending on PostgreSQL version):
 PostgreSQL (9.5.13, 9.6.9 and 10.4) CentOS7 - publicly available RHEL7 - customers only  Environment Variables Required    Name Default Description     PGDUMP_DB None Name of the database the backup is being performed on.</description>
    </item>
    
    <item>
      <title>crunchy-pgrestore</title>
      <link>https://crunchydata.github.io/crunchy-containers/container-specifications/crunchy-pgrestore/</link>
      <pubDate>Thu, 24 May 2018 12:05:38 -0700</pubDate>
      
      <guid>https://crunchydata.github.io/crunchy-containers/container-specifications/crunchy-pgrestore/</guid>
      <description>The restore image provides a means of performing a restore of a dump from pg_dump or pg_dumpall via psql or pg_restore to a PostgreSQL container database.
Packages The crunchy-pgrestore Docker image contains the following packages (versions vary depending on PostgreSQL version):
 PostgreSQL (9.5.13, 9.6.9 and 10.4) CentOS7 - publicly available RHEL7 - customers only  Environment Variables Required    Name Default Description     PGRESTORE_DB None Name of the database to connect to.</description>
    </item>
    
    <item>
      <title>crunchy-collect</title>
      <link>https://crunchydata.github.io/crunchy-containers/container-specifications/crunchy-collect/</link>
      <pubDate>Thu, 24 May 2018 10:06:13 -0700</pubDate>
      
      <guid>https://crunchydata.github.io/crunchy-containers/container-specifications/crunchy-collect/</guid>
      <description>The crunchy-collect container provides real time metrics about the PostgreSQL database via an API. These metrics are scrapped and stored by a Prometheus time-series database and are then graphed and visualized through the open source data visualizer Grafana.
Custom queries to collect metrics can be specified by the user. By mounting a queries.yml file to /conf on the container, additional metrics can be specified for the API to collect. For an example of a queries.</description>
    </item>
    
    <item>
      <title>crunchy-prometheus</title>
      <link>https://crunchydata.github.io/crunchy-containers/container-specifications/crunchy-prometheus/</link>
      <pubDate>Thu, 24 May 2018 10:06:21 -0700</pubDate>
      
      <guid>https://crunchydata.github.io/crunchy-containers/container-specifications/crunchy-prometheus/</guid>
      <description>Prometheus is a multi-dimensional time series data model with an elastic query language. It is used in collaboration with Grafana in this metrics suite. Overall, it’s reliable, manageable, and operationally simple for efficiently storing and analyzing data for large-scale environments. It scraps metrics from exporters such as the ones utilized by the crunchy-collect container. The crunchy-prometheus container must be able to reach the crunchy-collect container in order to to scrape metrics.</description>
    </item>
    
    <item>
      <title>crunchy-grafana</title>
      <link>https://crunchydata.github.io/crunchy-containers/container-specifications/crunchy-grafana/</link>
      <pubDate>Thu, 24 May 2018 10:06:17 -0700</pubDate>
      
      <guid>https://crunchydata.github.io/crunchy-containers/container-specifications/crunchy-grafana/</guid>
      <description>Visual dashboards are created from the collected and stored data that crunchy-collect and crunchy-prometheus provide for the crunchy-grafana container, which hosts an open source web-based graphing dashboard called Grafana.
Grafana is a platform which can then apply the defined metrics and visualize information through various tools. It is extremely flexible with a powerful query and transformation language, producing beautiful and easily understandable graphics to analyze and monitor your data.</description>
    </item>
    
    <item>
      <title>crunchy-pgadmin4</title>
      <link>https://crunchydata.github.io/crunchy-containers/container-specifications/crunchy-pgadmin4/</link>
      <pubDate>Thu, 24 May 2018 12:05:42 -0700</pubDate>
      
      <guid>https://crunchydata.github.io/crunchy-containers/container-specifications/crunchy-pgadmin4/</guid>
      <description>The crunchy-ppgadmin4 container executes the pgAdmin4 web application.
pgAdmin4 provides a web user interface to PostgreSQL databases. A sample screenshot is below:
Features The following features are supported by the crunchy-pgadmin4 container:
 Expose port (5050 by default) which is the web server port. Mount a certificate and key to the /certs directory and set ENABLE_TLS to true to activate HTTPS mode. Set username and password for login via environment variables.</description>
    </item>
    
    <item>
      <title>crunchy-watch</title>
      <link>https://crunchydata.github.io/crunchy-containers/container-specifications/crunchy-watch/</link>
      <pubDate>Thu, 24 May 2018 12:06:15 -0700</pubDate>
      
      <guid>https://crunchydata.github.io/crunchy-containers/container-specifications/crunchy-watch/</guid>
      <description>The crunchy-watch container essentially does a health check on a primary database container and performs a failover sequence if the primary is not reached. The watch container has access to a service account that is used inside the container to issue commands to OpenShift.
In Kubrnetese 1.5, if a policy file is being used for securing down the Kubernetes cluster, you could possibly need to add a policy to allow the pg-watcher service account access to the Kubernetes API as mentioned here.</description>
    </item>
    
    <item>
      <title>crunchy-vacuum</title>
      <link>https://crunchydata.github.io/crunchy-containers/container-specifications/crunchy-vacuum/</link>
      <pubDate>Thu, 24 May 2018 12:06:12 -0700</pubDate>
      
      <guid>https://crunchydata.github.io/crunchy-containers/container-specifications/crunchy-vacuum/</guid>
      <description>The crunchy-vacuum container allows you to perform a SQL VACUUM job against a PostgreSQL database container. You specify a database to vacuum using various environment variables which are listed below. It is possible to run different vacuum operations either manually or automatically through scheduling.
The crunchy-vacuum image is executed, with the Postgres connection parameters passed to the single-primary PostgreSQL container. The type of vacuum performed is dictated by the environment variables passed into the job.</description>
    </item>
    
    <item>
      <title>crunchy-upgrade</title>
      <link>https://crunchydata.github.io/crunchy-containers/container-specifications/crunchy-upgrade/</link>
      <pubDate>Thu, 24 May 2018 12:05:31 -0700</pubDate>
      
      <guid>https://crunchydata.github.io/crunchy-containers/container-specifications/crunchy-upgrade/</guid>
      <description>The crunchy-upgrade container contains both the 9.5&amp;frasl;9.6 and 9.6&amp;frasl;10 PostgreSQL packages in order to perform a pg_upgrade from 9.5 to 9.6 or 9.6 to 10 versions.
Features The following features are supported by the crunchy-upgrade container:
 Supports a pg_upgrade of the PostgreSQL database. Doesn&amp;rsquo;t alter the old database files. Creates the new database directory.  Restrictions  Does not currently support a PostGIS upgrade. Supports upgrades from only 9.</description>
    </item>
    
    <item>
      <title>crunchy-sim</title>
      <link>https://crunchydata.github.io/crunchy-containers/container-specifications/crunchy-sim/</link>
      <pubDate>Thu, 24 May 2018 12:05:28 -0700</pubDate>
      
      <guid>https://crunchydata.github.io/crunchy-containers/container-specifications/crunchy-sim/</guid>
      <description>The crunchy-sim container is a simple traffic simulator for PostgreSQL.
Features  Creates a single connection to PostgreSQL and will execute queries over a specified interval range. Queries are specified through a simple YAML file. Each query is a name-value pair and can span multiple lines by utilizing scalar notation (&amp;ldquo;|&amp;rdquo; or &amp;ldquo;&amp;gt;&amp;rdquo;) as defined by the YAML spec. Queries are randomly chosen for execution.  Restrictions  Only one connection is created for all queries.</description>
    </item>
    
    <item>
      <title>crunchy-dba</title>
      <link>https://crunchydata.github.io/crunchy-containers/container-specifications/crunchy-dba/</link>
      <pubDate>Thu, 24 May 2018 12:05:24 -0700</pubDate>
      
      <guid>https://crunchydata.github.io/crunchy-containers/container-specifications/crunchy-dba/</guid>
      <description>The crunchy-dba container implements a cron scheduler. The purpose of the crunchy-dba container is to offer a way to perform simple DBA tasks that occur on some form of schedule such as backup jobs or running a vacuum on a single PostgreSQL database container.
You can either run the crunchy-dba container as a single pod or include the container within a database pod.
The crunchy-dba container makes use of a Service Account to perform the startup of scheduled jobs.</description>
    </item>
    
    <item>
      <title>crunchy-pgbouncer</title>
      <link>https://crunchydata.github.io/crunchy-containers/container-specifications/crunchy-pgbouncer/</link>
      <pubDate>Thu, 24 May 2018 12:05:03 -0700</pubDate>
      
      <guid>https://crunchydata.github.io/crunchy-containers/container-specifications/crunchy-pgbouncer/</guid>
      <description>pgBouncer is a lightweight connection pooler for PostgreSQL databases.
Features The following features are supported by the crunchy-pgbouncer container:
 crunchy-pgbouncer uses auth_query to authenticate users. This requires only the pgbouncer username and password in users.txt. Automatically generated from environment variables. Mount a custom users.txt and pgbouncer.ini configurations for advanced usage. Tune pooling parameters via environment variables. Connect to the administration database in pgBouncer to view statistics of the target databases.</description>
    </item>
    
    <item>
      <title>crunchy-pgpool</title>
      <link>https://crunchydata.github.io/crunchy-containers/container-specifications/crunchy-pgpool/</link>
      <pubDate>Thu, 24 May 2018 12:05:00 -0700</pubDate>
      
      <guid>https://crunchydata.github.io/crunchy-containers/container-specifications/crunchy-pgpool/</guid>
      <description>The crunchy-pgpool container executes the pgPool II utility. pgPool can be used to provide a smart PostgreSQL-aware proxy to a PostgreSQL cluster, both primary and replica, so that applications only have to work with a single database connection.
PostgreSQL replicas are read-only whereas a primary is capable of receiving both read and write actions.
The default pgPool examples use a Secret to hold the set of pgPool configuration files used by the examples.</description>
    </item>
    
    <item>
      <title>crunchy-pgbadger</title>
      <link>https://crunchydata.github.io/crunchy-containers/container-specifications/crunchy-pgbadger/</link>
      <pubDate>Thu, 24 May 2018 12:04:55 -0700</pubDate>
      
      <guid>https://crunchydata.github.io/crunchy-containers/container-specifications/crunchy-pgbadger/</guid>
      <description>The crunchy-pgbadger container executes the pgBadger utility, which generates a PostgreSQL log analysis report using a small HTTP server running on the container. This log report can be accessed through the URL http://&amp;lt;&amp;gt;:10000/api/badgergenerate.
Features The following features are supported by the crunchy-pgbadger container:
 Generate a full report by default Optional custom options for more advanced use cases (such as incremental reports) Report persistence on a volume  Packages The crunchy-badger Docker image contains the following packages:</description>
    </item>
    
    <item>
      <title>Single Primary</title>
      <link>https://crunchydata.github.io/crunchy-containers/getting-started/openshift-templates/single-primary/</link>
      <pubDate>Tue, 15 May 2018 07:22:59 -0700</pubDate>
      
      <guid>https://crunchydata.github.io/crunchy-containers/getting-started/openshift-templates/single-primary/</guid>
      <description>v2.0
The Crunchy PostgreSQL Primary Template creates a single primary pod.
Objects The Crunchy PostreSQL Primary Template creates the following objects:
 PostgreSQL Secret - usernames and passwords generated from the template PGData PVC - Volume where PostgreSQL database will be stored Primary Service - Service connected to the Primary Pod Primary Pod - Primary database pod  Storage This template assumes STORAGE_CLASS volumes will be used.
Form Required    Name Description     VOLUME_STORAGE_CLASS Name of the Storage Class that provides persistence for the container.</description>
    </item>
    
    <item>
      <title>Primary Restore</title>
      <link>https://crunchydata.github.io/crunchy-containers/getting-started/openshift-templates/primary-restore/</link>
      <pubDate>Tue, 15 May 2018 07:22:51 -0700</pubDate>
      
      <guid>https://crunchydata.github.io/crunchy-containers/getting-started/openshift-templates/primary-restore/</guid>
      <description>v2.0
The Crunchy PostgreSQL Primary Restore Template creates a single primary pod from a pg_basebackup physical backup.
Objects The Crunchy PostreSQL Primary Template creates the following objects:
 PostgreSQL Secret - usernames and passwords generated from the template PGData PVC - Volume where PostgreSQL database will be stored Primary Service - Service connected to the Primary Pod Primary Pod - Primary database pod  Storage This template assumes STORAGE_CLASS volumes will be used.</description>
    </item>
    
    <item>
      <title>Primary Restore Secret</title>
      <link>https://crunchydata.github.io/crunchy-containers/getting-started/openshift-templates/primary-restore-secret/</link>
      <pubDate>Tue, 15 May 2018 07:22:45 -0700</pubDate>
      
      <guid>https://crunchydata.github.io/crunchy-containers/getting-started/openshift-templates/primary-restore-secret/</guid>
      <description>v2.0
The Crunchy PostgreSQL Primary Restore Template creates a single primary pod from a pg_basebackup physical backup.
Objects The Crunchy PostreSQL Primary Template creates the following objects:
 PGData PVC - Volume where PostgreSQL database will be stored Primary Service - Service connected to the Primary Pod Primary Pod - Primary database pod  Storage This template assumes STORAGE_CLASS volumes will be used.
The template assumes a BACKUP PVC has been created and contains a backup.</description>
    </item>
    
    <item>
      <title>Primary Backup</title>
      <link>https://crunchydata.github.io/crunchy-containers/getting-started/openshift-templates/primary-backup/</link>
      <pubDate>Tue, 15 May 2018 07:22:27 -0700</pubDate>
      
      <guid>https://crunchydata.github.io/crunchy-containers/getting-started/openshift-templates/primary-backup/</guid>
      <description>v2.0
The Crunchy Backup template takes a pg_basebackup of the target database.
Objects The Crunchy Backup Template creates the following objects:
 Backup PVC - Volume where pg_basebackup physical backups will be stored. Backup Job - Short lived pod that creates a physical backup using pg_basebackup.  Storage This template assumes STORAGE_CLASS volumes will be used.
Form Required    Name Description     VOLUME_STORAGE_CLASS Name of the Storage Class that provides persistence for the container.</description>
    </item>
    
    <item>
      <title>Primary Backup Secret</title>
      <link>https://crunchydata.github.io/crunchy-containers/getting-started/openshift-templates/primary-backup-secret/</link>
      <pubDate>Tue, 15 May 2018 07:22:20 -0700</pubDate>
      
      <guid>https://crunchydata.github.io/crunchy-containers/getting-started/openshift-templates/primary-backup-secret/</guid>
      <description>v2.0
The Crunchy Backup Secrets template takes a pg_basebackup of the target database using a pre-existing OpenShift secret to retrieve usernames and passwords for backup purposes.
Objects The Crunchy Backup Template creates the following objects:
 Backup PVC - Volume where pg_basebackup physical backups will be stored. Backup Job - Short lived pod that creates a physical backup using pg_basebackup.  Storage This template assumes STORAGE_CLASS volumes will be used.</description>
    </item>
    
    <item>
      <title>Primary Replica</title>
      <link>https://crunchydata.github.io/crunchy-containers/getting-started/openshift-templates/postgres-replicated/</link>
      <pubDate>Tue, 15 May 2018 07:22:10 -0700</pubDate>
      
      <guid>https://crunchydata.github.io/crunchy-containers/getting-started/openshift-templates/postgres-replicated/</guid>
      <description>v2.0
The Crunchy PostgreSQL Primary/Replica Template creates a primary pod with replica statefulsets to provide a database cluster with streaming replication.
Objects The Crunchy PostreSQL Primary/Replica Template creates the following objects:
 PostgreSQL Secret - usernames and passwords generated from the template PGData PVC - Volume where PostgreSQL database will be stored Backup PVC - Volume where pg_basebackup physical backups will be stored Backrestrepo PVC - Volume where pgBackRest physical backups will be stored Primary Service - Service connected to the Primary Pod Replica Service - Service connected to the Replica Pods Primary Pod - Primary database pod Replica Statefulset - Replica database pods  Storage This template assumes STORAGE_CLASS volumes will be used.</description>
    </item>
    
    <item>
      <title>pgAdmin4</title>
      <link>https://crunchydata.github.io/crunchy-containers/getting-started/openshift-templates/pgadmin4/</link>
      <pubDate>Tue, 15 May 2018 07:22:02 -0700</pubDate>
      
      <guid>https://crunchydata.github.io/crunchy-containers/getting-started/openshift-templates/pgadmin4/</guid>
      <description>v2.0
Crunchy pgAdmin4 Template provides a feature rich, GUI Open Source administration and development platform for PostgreSQL.
Objects The Crunchy pgAdmin4 Template creates the following objects:
 pgAdmin4 Secret - email and password for login pgAdmin4 PVC - Volume where pgAdmin4 data will be stored pgAdmin4 Service - Service connected to the pgAdmin4 pod pgAdmin4 Pod - pgAdmin4 web application  Storage This template assumes STORAGE_CLASS volumes will be used.</description>
    </item>
    
  </channel>
</rss>