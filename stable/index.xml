<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Introduction on Crunchy Data Container Suite Documentation</title>
    <link>https://crunchydata.github.io/crunchy-containers/stable/</link>
    <description>Recent content in Introduction on Crunchy Data Container Suite Documentation</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 24 May 2018 10:06:13 -0700</lastBuildDate>
    
	<atom:link href="https://crunchydata.github.io/crunchy-containers/stable/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>PostgreSQL Primary</title>
      <link>https://crunchydata.github.io/crunchy-containers/stable/examples/postgresql/primary/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://crunchydata.github.io/crunchy-containers/stable/examples/postgresql/primary/</guid>
      <description>PostgreSQL Container Example This example starts a single PostgreSQL container and service, the most simple of examples.
The container creates a default database called userdb, a default user called testuser and a default password of password.
For all environments, the script additionally creates:
 A persistent volume claim A crunchy-postgres container named primary The database using predefined environment variables  And specifically for the Kubernetes and OpenShift environments:
 A pod named primary A service named primary A PVC named primary-pgdata The database using predefined environment variables  To shutdown the instance and remove the container for each example, run the following:</description>
    </item>
    
    <item>
      <title>crunchy-backrest-restore</title>
      <link>https://crunchydata.github.io/crunchy-containers/stable/container-specifications/crunchy-backrest-restore/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://crunchydata.github.io/crunchy-containers/stable/container-specifications/crunchy-backrest-restore/</guid>
      <description>The crunchy-backrest-restore container executes the pgBackRest utility, allowing FULL and DELTA restore capability. See the pgBackRest guide for more details.
Features The following features are supported and required by the crunchy-backrest-restore container:
 Mounted pgbackrest.conf configuration file via the /pgconf volume Mounted /backrestrepo for access to pgBackRest archives  Packages The crunchy-backrest-restore Docker image contains the following packages (versions vary depending on PostgreSQL version):
 PostgreSQL (11.2, 10.7, 9.6.12 and 9.</description>
    </item>
    
    <item>
      <title>Container Images</title>
      <link>https://crunchydata.github.io/crunchy-containers/stable/overview/overview/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://crunchydata.github.io/crunchy-containers/stable/overview/overview/</guid>
      <description>Overview The following provides a high level overview of each of the container images.
CentOS vs RHEL Images The Crunchy Container suite provides two different OS images: centos7 and rhel7. These images are indentical except for the packages used by yum to install the software.
The centos7 images, yum is configured to use PostgreSQL RPM Building Project.
The rhel7 images use Crunchy Certified RPMs and are only available to active Crunchy Data customers.</description>
    </item>
    
    <item>
      <title>Custom Configuration of PostgreSQL Container</title>
      <link>https://crunchydata.github.io/crunchy-containers/stable/examples/postgresql/custom-config/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://crunchydata.github.io/crunchy-containers/stable/examples/postgresql/custom-config/</guid>
      <description>Custom Configuration You can use your own version of the SQL file setup.sql to customize the initialization of database data and objects when the container and database are created.
This works by placing a file named setup.sql within the /pgconf mounted volume directory. Portions of the setup.sql file are required for the container to work; please see comments within the sample setup.sql file.
If you mount a /pgconf volume, crunchy-postgres will look at that directory for postgresql.</description>
    </item>
    
    <item>
      <title>crunchy-backup</title>
      <link>https://crunchydata.github.io/crunchy-containers/stable/container-specifications/crunchy-backup/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://crunchydata.github.io/crunchy-containers/stable/container-specifications/crunchy-backup/</guid>
      <description>The crunchy-backup container executes a full backup against another database container using the standard pg_basebackup utility that is included with PostgreSQL.
Features The following features are supported by the crunchy-backup container:
 Backup and restoration from: pg_basebackup  Packages The crunchy-backup Docker image contains the following packages (versions vary depending on PostgreSQL version):
 PostgreSQL (11.2, 10.7, 9.6.12 and 9.5.16) CentOS7 - publicly available RHEL7 - customers only  Environment Variables Required    Name Default Description     BACKUP_LABEL crunchy-backup The label for the backup.</description>
    </item>
    
    <item>
      <title>crunchy-collect</title>
      <link>https://crunchydata.github.io/crunchy-containers/stable/container-specifications/crunchy-collect/</link>
      <pubDate>Thu, 24 May 2018 10:06:13 -0700</pubDate>
      
      <guid>https://crunchydata.github.io/crunchy-containers/stable/container-specifications/crunchy-collect/</guid>
      <description>The crunchy-collect container provides real time metrics about the PostgreSQL database via an API. These metrics are scraped and stored by a Prometheus time-series database and are then graphed and visualized through the open source data visualizer Grafana.
The crunchy-collect container uses pgMonitor for advanced metric collection. It is required that the crunchy-postgres container has the PGMONITOR_PASSWORD environment variable to create the appropriate user (ccp_monitoring) to collect metrics.
Custom queries to collect metrics can be specified by the user.</description>
    </item>
    
    <item>
      <title>Custom Configuration of PostgreSQL Container with SSL</title>
      <link>https://crunchydata.github.io/crunchy-containers/stable/examples/postgresql/custom-config-ssl/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://crunchydata.github.io/crunchy-containers/stable/examples/postgresql/custom-config-ssl/</guid>
      <description>SSL Authentication This example shows how you can configure PostgreSQL to use SSL for client authentication.
The example requires SSL certificates and keys to be created. Included in the examples directory is a script to create self-signed certificates (server and client) for the example: $CCPROOT/examples/ssl-creator.sh.
The example creates a client certificate for the user testuser. Furthermore, the server certificate is created for the server name custom-config-ssl.
This example can be run as follows for the Docker environment:</description>
    </item>
    
    <item>
      <title>Supported Platforms</title>
      <link>https://crunchydata.github.io/crunchy-containers/stable/overview/supported/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://crunchydata.github.io/crunchy-containers/stable/overview/supported/</guid>
      <description> Supported Platforms Crunchy Container Suite supports the following platforms:
 Docker 1.13+ Kubernetes 1.8+ OpenShift Container Platform 3.11  </description>
    </item>
    
    <item>
      <title>crunchy-grafana</title>
      <link>https://crunchydata.github.io/crunchy-containers/stable/container-specifications/crunchy-grafana/</link>
      <pubDate>Thu, 24 May 2018 10:06:17 -0700</pubDate>
      
      <guid>https://crunchydata.github.io/crunchy-containers/stable/container-specifications/crunchy-grafana/</guid>
      <description>Visual dashboards are created from the collected and stored data that crunchy-collect and crunchy-prometheus provide for the crunchy-grafana container, which hosts an open source web-based graphing dashboard called Grafana.
Grafana is a platform which can then apply the defined metrics and visualize information through various tools. It is extremely flexible with a powerful query and transformation language, producing beautiful and easily understandable graphics to analyze and monitor your data.</description>
    </item>
    
    <item>
      <title>Primary and Streaming Replica Containers</title>
      <link>https://crunchydata.github.io/crunchy-containers/stable/examples/postgresql/primary-replica/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://crunchydata.github.io/crunchy-containers/stable/examples/postgresql/primary-replica/</guid>
      <description>Replication This example starts a primary and a replica pod containing a PostgreSQL database.
The container creates a default database called userdb, a default user called testuser and a default password of password.
For the Docker environment, the script additionally creates:
 A docker volume using the local driver for the primary A docker volume using the local driver for the replica A container named primary binding to port 12007 A container named replica binding to port 12008 A mapping of the PostgreSQL port 5432 within the container to the localhost port 12000 The database using predefined environment variables  And specifically for the Kubernetes and OpenShift environments:</description>
    </item>
    
    <item>
      <title>crunchy-pgadmin4</title>
      <link>https://crunchydata.github.io/crunchy-containers/stable/container-specifications/crunchy-pgadmin4/</link>
      <pubDate>Thu, 24 May 2018 12:05:42 -0700</pubDate>
      
      <guid>https://crunchydata.github.io/crunchy-containers/stable/container-specifications/crunchy-pgadmin4/</guid>
      <description>The crunchy-pgadmin4 container executes the pgAdmin4 web application.
pgAdmin4 provides a web user interface to PostgreSQL databases. A sample screenshot is below:
Features The following features are supported by the crunchy-pgadmin4 container:
 Expose port (5050 by default) which is the web server port. Mount a certificate and key to the /certs directory and set ENABLE_TLS to true to activate HTTPS mode. Set username and password for login via environment variables.</description>
    </item>
    
    <item>
      <title>Synchronous Replication</title>
      <link>https://crunchydata.github.io/crunchy-containers/stable/examples/postgresql/sync-replica/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://crunchydata.github.io/crunchy-containers/stable/examples/postgresql/sync-replica/</guid>
      <description>Synchronous Replication This example deploys a PostgreSQL cluster with a primary, a synchronous replica, and an asynchronous replica. The two replicas share the same service.
To shutdown the instance and remove the container for each example, run the following:
./cleanup.sh  Docker To run this example, run the following:
cd $CCPROOT/examples/docker/sync ./run.sh  You can test the replication status on the primary by using the following command and the password password:</description>
    </item>
    
    <item>
      <title>crunchy-pgbadger</title>
      <link>https://crunchydata.github.io/crunchy-containers/stable/container-specifications/crunchy-pgbadger/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://crunchydata.github.io/crunchy-containers/stable/container-specifications/crunchy-pgbadger/</guid>
      <description>The crunchy-pgbadger container executes the pgBadger utility, which generates a PostgreSQL log analysis report using a small HTTP server running on the container. This log report can be accessed through the URL http://&amp;lt;&amp;gt;:10000/api/badgergenerate.
Features The following features are supported by the crunchy-pgbadger container:
 Generate a full report by default Optional custom options for more advanced use cases (such as incremental reports) Report persistence on a volume  Packages The crunchy-badger Docker image contains the following packages:</description>
    </item>
    
    <item>
      <title>Statefulset PostgreSQL Cluster</title>
      <link>https://crunchydata.github.io/crunchy-containers/stable/examples/postgresql/statefulset-cluster/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://crunchydata.github.io/crunchy-containers/stable/examples/postgresql/statefulset-cluster/</guid>
      <description>Statefulsets This example deploys a statefulset named statefulset. The statefulset is a new feature in Kubernetes as of version 1.5 and in OpenShift Origin as of version 3.5. Statefulsets have replaced PetSets going forward.
Please view this Kubernetes description to better understand what a Statefulset is and how it works.
This example creates 2 PostgreSQL containers to form the set. At startup, each container will examine its hostname to determine if it is the first container within the set of containers.</description>
    </item>
    
    <item>
      <title>crunchy-pgbouncer</title>
      <link>https://crunchydata.github.io/crunchy-containers/stable/container-specifications/crunchy-pgbouncer/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://crunchydata.github.io/crunchy-containers/stable/container-specifications/crunchy-pgbouncer/</guid>
      <description>pgBouncer is a lightweight connection pooler for PostgreSQL databases.
Features The following features are supported by the crunchy-pgbouncer container:
 crunchy-pgbouncer uses auth_query to authenticate users. This requires only the pgbouncer username and password in users.txt. Automatically generated from environment variables. Mount a custom users.txt and pgbouncer.ini configurations for advanced usage. Tune pooling parameters via environment variables. Connect to the administration database in pgBouncer to view statistics of the target databases.</description>
    </item>
    
    <item>
      <title>PostGIS Container</title>
      <link>https://crunchydata.github.io/crunchy-containers/stable/examples/postgresql/postgis/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://crunchydata.github.io/crunchy-containers/stable/examples/postgresql/postgis/</guid>
      <description>Geospatial (PostGIS) An example is provided that will run a PostgreSQL with PostGIS pod and service in Kubernetes and OpenShift and a container in Docker.
The container creates a default database called userdb, a default user called testuser and a default password of password.
You can view the extensions that postgres-gis has enabled by running the following command and viewing the listed PostGIS packages:
psql -h postgres-gis -U testuser userdb -c &#39;\dx&#39;  To validate that PostGIS is installed and which version is running, run the command:</description>
    </item>
    
    <item>
      <title>crunchy-pgdump</title>
      <link>https://crunchydata.github.io/crunchy-containers/stable/container-specifications/crunchy-pgdump/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://crunchydata.github.io/crunchy-containers/stable/container-specifications/crunchy-pgdump/</guid>
      <description>The crunchy-pgdump container executes either a pg_dump or pg_dumpall database backup against another PostgreSQL database.
Packages The crunchy-pgdump Docker image contains the following packages (versions vary depending on PostgreSQL version):
 PostgreSQL (11.2, 10.7, 9.6.12 and 9.5.16) CentOS7 - publicly available RHEL7 - customers only  Environment Variables Required    Name Default Description     PGDUMP_DB None Name of the database the backup is being performed on.</description>
    </item>
    
    <item>
      <title>crunchy-pgpool</title>
      <link>https://crunchydata.github.io/crunchy-containers/stable/container-specifications/crunchy-pgpool/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://crunchydata.github.io/crunchy-containers/stable/container-specifications/crunchy-pgpool/</guid>
      <description>The crunchy-pgpool container executes the pgPool II utility. pgPool can be used to provide a smart PostgreSQL-aware proxy to a PostgreSQL cluster, both primary and replica, so that applications only have to work with a single database connection.
PostgreSQL replicas are read-only whereas a primary is capable of receiving both read and write actions.
The default pgPool examples use a Secret to hold the set of pgPool configuration files used by the examples.</description>
    </item>
    
    <item>
      <title>crunchy-pgrestore</title>
      <link>https://crunchydata.github.io/crunchy-containers/stable/container-specifications/crunchy-pgrestore/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://crunchydata.github.io/crunchy-containers/stable/container-specifications/crunchy-pgrestore/</guid>
      <description>The restore image provides a means of performing a restore of a dump from pg_dump or pg_dumpall via psql or pg_restore to a PostgreSQL container database.
Packages The crunchy-pgrestore Docker image contains the following packages (versions vary depending on PostgreSQL version):
 PostgreSQL (11.2, 10.7, 9.6.12 and 9.5.16) CentOS7 - publicly available RHEL7 - customers only  Environment Variables Required    Name Default Description     PGRESTORE_DB None Name of the database to connect to.</description>
    </item>
    
    <item>
      <title>crunchy-postgres-gis</title>
      <link>https://crunchydata.github.io/crunchy-containers/stable/container-specifications/crunchy-postgres-gis/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://crunchydata.github.io/crunchy-containers/stable/container-specifications/crunchy-postgres-gis/</guid>
      <description>PostgreSQL (pronounced &amp;ldquo;post-gress-Q-L&amp;rdquo;) is an open source, ACID compliant, relational database management system (RDBMS) developed by a worldwide team of volunteers. The crunchy-postgres-gis container image is unmodified, open source PostgreSQL packaged and maintained by professionals. This image is identical to the crunchy-postgres image except it includes the open source geospatial extension PostGIS for PostgreSQL in addition to the language extension PL/R which allows for writing functions in the R statistical computing language.</description>
    </item>
    
    <item>
      <title>crunchy-postgres</title>
      <link>https://crunchydata.github.io/crunchy-containers/stable/container-specifications/crunchy-postgres/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://crunchydata.github.io/crunchy-containers/stable/container-specifications/crunchy-postgres/</guid>
      <description>PostgreSQL (pronounced &amp;ldquo;post-gress-Q-L&amp;rdquo;) is an open source, ACID compliant, relational database management system (RDBMS) developed by a worldwide team of volunteers. The crunchy-postgres container image is unmodified, open source PostgreSQL packaged and maintained by professionals.
Features The following features are supported by the crunchy-postgres container:
 Kubernetes and OpenShift secrets Backup and restoration from various tools: pgbackrest, pg_basebackup and pg_dump/pg_restore. Custom mounted configuration files (see below) Async and Sync Replication  Packages The crunchy-postgres Docker image contains the following packages (versions vary depending on PostgreSQL version):</description>
    </item>
    
    <item>
      <title>crunchy-prometheus</title>
      <link>https://crunchydata.github.io/crunchy-containers/stable/container-specifications/crunchy-prometheus/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://crunchydata.github.io/crunchy-containers/stable/container-specifications/crunchy-prometheus/</guid>
      <description>Prometheus is a multi-dimensional time series data model with an elastic query language. It is used in collaboration with Grafana in this metrics suite. Overall, it’s reliable, manageable, and operationally simple for efficiently storing and analyzing data for large-scale environments. It scraps metrics from exporters such as the ones utilized by the crunchy-collect container. The crunchy-prometheus container must be able to reach the crunchy-collect container in order to to scrape metrics.</description>
    </item>
    
    <item>
      <title>crunchy-scheduler</title>
      <link>https://crunchydata.github.io/crunchy-containers/stable/container-specifications/crunchy-scheduler/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://crunchydata.github.io/crunchy-containers/stable/container-specifications/crunchy-scheduler/</guid>
      <description>The Crunchy Scheduler container provides a cronlike microservice for automating pgBaseBackup and pgBackRest backups within a single namespace. The scheduler watches Kubernetes for config maps with the label crunchy-scheduler=true. If found the scheduler parses a JSON object contained in the config map and converts it into an scheduled task.
Packages The Crunchy Scheduler Docker image contains the following packages:
 CentOS7 - publicly available RHEL7 - customers only Scheduler App  Environment Variables Required    Name Default Description     NAMESPACE None The namespace the microservice should watch.</description>
    </item>
    
    <item>
      <title>crunchy-upgrade</title>
      <link>https://crunchydata.github.io/crunchy-containers/stable/container-specifications/crunchy-upgrade/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://crunchydata.github.io/crunchy-containers/stable/container-specifications/crunchy-upgrade/</guid>
      <description>The crunchy-upgrade container contains both the 9.5 / 9.6 and 9.6 / 10 PostgreSQL packages in order to perform a pg_upgrade from 9.5 to 9.6 or 9.6 to 10 versions.
Features The following features are supported by the crunchy-upgrade container:
 Supports a pg_upgrade of the PostgreSQL database. Doesn&amp;rsquo;t alter the old database files. Creates the new database directory.  Restrictions  Does not currently support a PostGIS upgrade. Supports upgrades from only 9.</description>
    </item>
    
    <item>
      <title>pgPool II</title>
      <link>https://crunchydata.github.io/crunchy-containers/stable/examples/poolers/pgpool/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://crunchydata.github.io/crunchy-containers/stable/examples/poolers/pgpool/</guid>
      <description>pgPool Logical Router Example An example is provided that will run a pgPool II container in conjunction with the primary-replica example provided above.
You can execute both INSERT and SELECT statements after connecting to pgpool. The container will direct INSERT statements to the primary and SELECT statements will be sent round-robin to both the primary and replica.
The container creates a default database called userdb, a default user called testuser and a default password of password.</description>
    </item>
    
    <item>
      <title>pgBackRest</title>
      <link>https://crunchydata.github.io/crunchy-containers/stable/examples/backup-restoration/pgbackrest/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://crunchydata.github.io/crunchy-containers/stable/examples/backup-restoration/pgbackrest/</guid>
      <description>pgBackRest Examples Written and maintained by David Steele, pgBackRest is a utility that provides backup and restore functionality for PostgreSQL databases. pgBackRest is available for use within the Crunchy Container Suite, and can therefore be utilized to provide an effective backup and restore solution for any database clusters deployed using the crunchy-postgres or crunchy-postgres-gis containers. The following section will provide an overview of how pgBackRest can be utilized within the Crunchy Container Suite, including examples for enabling and configuring pgBackRest, and then utilizing pgBackRest to backup and restore various PostgreSQL database clusters.</description>
    </item>
    
    <item>
      <title>pgBaseBackup</title>
      <link>https://crunchydata.github.io/crunchy-containers/stable/examples/backup-restoration/pgbasebackup/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://crunchydata.github.io/crunchy-containers/stable/examples/backup-restoration/pgbasebackup/</guid>
      <description>pgBaseBackup Examples The script assumes you are going to backup the primary container created in the first example, so you need to ensure that container is running. This example assumes you have configured storage as described in the Storage Configuration documentation. Things to point out with this example include its use of persistent volumes and volume claims to store the backup data files.
A successful backup will perform pg_basebackup on the primary container and store the backup in the $CCP_STORAGE_PATH volume under a directory named $CCP_NAMESPACE-primary-backups.</description>
    </item>
    
    <item>
      <title>pgDump &amp; pgRestore</title>
      <link>https://crunchydata.github.io/crunchy-containers/stable/examples/backup-restoration/pgdump-pgrestore/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://crunchydata.github.io/crunchy-containers/stable/examples/backup-restoration/pgdump-pgrestore/</guid>
      <description>pgDump &amp;amp; pgRestore Examples The following examples will demonstrate how the crunchy-pgdump container can be utilized to create a database backup using the pg_dump utility, while also demonstrating how the backup created can then be utilized to restore the database using the pg_restore utility.
Backup (pg_dump) The script assumes you are going to backup the primary example and that container is running.
This example assumes you have configured a storage filesystem as described in the Storage Configuration document.</description>
    </item>
    
    <item>
      <title>Scheduler</title>
      <link>https://crunchydata.github.io/crunchy-containers/stable/examples/backup-restoration/scheduler/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://crunchydata.github.io/crunchy-containers/stable/examples/backup-restoration/scheduler/</guid>
      <description>Crunchy Scheduler The Crunchy Scheduler container implements a cronlike microservice within a namespace to automate backups of a PostgreSQL database.
Currently Crunchy Scheduler only supports two types of tasks:
 pgBackRest pgBaseBackup  This service watches Kubernetes for config maps with the label crunchy-scheduler=true. If found the scheduler will parse the data found in the config map (json object) and convert it to a scheduled task. If the config map is removed, the scheduler will delete the task.</description>
    </item>
    
    <item>
      <title>User Guide</title>
      <link>https://crunchydata.github.io/crunchy-containers/stable/client-user-guide/user-guide/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://crunchydata.github.io/crunchy-containers/stable/client-user-guide/user-guide/</guid>
      <description>User Guide Overview This guide is intended to get you up and running with the Crunchy Container Suite, and therefore provides guidance for deploying the Crunchy Container Suite within your own environment. This includes guidance for standing-up and configuring your environment in order to run Crunchy Containers examples that can be found in the next section.
Please see the following sections in order to properly setup and configure your environment for the Crunchy Container Suite (please feel free to skip any sections that have already been completed within your environment):</description>
    </item>
    
    <item>
      <title>Using the Images</title>
      <link>https://crunchydata.github.io/crunchy-containers/stable/client-user-guide/usage/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://crunchydata.github.io/crunchy-containers/stable/client-user-guide/usage/</guid>
      <description>Running the Examples The Kubernetes and OpenShift examples in this guide have been designed using single-node Kubernetes/OCP clusters whose host machines provide any required supporting infrastructure or services (e.g. local HostPath storage or access to an NFS share). Therefore, for the best results when running these examples, it is recommended that you utilize a single-node architecture as well.
Additionally, the examples located in the kube directory work on both Kubernetes and OpenShift.</description>
    </item>
    
    <item>
      <title>pgBouncer</title>
      <link>https://crunchydata.github.io/crunchy-containers/stable/examples/poolers/pgbouncer/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://crunchydata.github.io/crunchy-containers/stable/examples/poolers/pgbouncer/</guid>
      <description>pgBouncer Connection Pooling Example Crunchy pgBouncer is a lightweight connection pooler for PostgreSQL databases.
The following examples create the following containers:
 pgBouncer Primary pgBouncer Replica PostgreSQL Primary PostgreSQL Replica  In Kubernetes and OpenShift, this example will also create:
 pgBouncer Primary Service pgBouncer Replica Service Primary Service Replica Service PostgreSQL Secrets pgBouncer Secrets  To cleanup the objects created by this example, run the following in the pgbouncer example directory:</description>
    </item>
    
    <item>
      <title>Metrics and Performance</title>
      <link>https://crunchydata.github.io/crunchy-containers/stable/examples/metrics/metrics/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://crunchydata.github.io/crunchy-containers/stable/examples/metrics/metrics/</guid>
      <description>Metrics Collection You can collect various PostgreSQL metrics from your database container by running a crunchy-collect container that points to your database container.
This example starts up 5 containers:
 Collect (crunchy-collect) Grafana (crunchy-grafana) PostgreSQL (crunchy-postgres) Prometheus (crunchy-prometheus)  Every 5 seconds by default, Prometheus will scrape the Collect container for metrics. These metrics will then be visualized by Grafana, which by default can be accessed with the following credentials:</description>
    </item>
    
    <item>
      <title>pgBadger</title>
      <link>https://crunchydata.github.io/crunchy-containers/stable/examples/metrics/pgbadger/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://crunchydata.github.io/crunchy-containers/stable/examples/metrics/pgbadger/</guid>
      <description>pgBadger Example pgbadger is a PostgreSQL tool that reads the log files from a specified database in order to produce a HTML report that shows various PostgreSQL statistics and graphs. This example runs the pgbadger HTTP server against a crunchy-postgres container and illustrates how to view the generated reports.
The port utilized for this tool is port 14000 for Docker environments and port 10000 for Kubernetes and OpenShift environments.</description>
    </item>
    
    <item>
      <title>Centralized Logging</title>
      <link>https://crunchydata.github.io/crunchy-containers/stable/examples/logging/centralized-logging/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://crunchydata.github.io/crunchy-containers/stable/examples/logging/centralized-logging/</guid>
      <description>Centralized Logging Example The logs generated by containers are critical for deployments because they provide insights into the health of the system. PostgreSQL logs are very detailed and there is some information that can only be obtained from logs (but not limited to):
 Connections and Disconnections of users Checkpoint Statistics PostgreSQL Server Errors  Aggregrating container logs across multiple hosts allows administrators to audit, debug problems and prevent repudiation of misconduct.</description>
    </item>
    
    <item>
      <title>pgAudit</title>
      <link>https://crunchydata.github.io/crunchy-containers/stable/examples/logging/pgaudit/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://crunchydata.github.io/crunchy-containers/stable/examples/logging/pgaudit/</guid>
      <description>pgAudit Enhanced Logging This example provides an example of enabling pg_audit output. As of release 1.3, pg_audit is included in the crunchy-postgres container and is added to the PostgreSQL shared library list in postgresql.conf.
Given the numerous ways pg_audit can be configured, the exact pg_audit configuration is left to the user to define. pg_audit allows you to configure auditing rules either in postgresql.conf or within your SQL script.
For this test, we place pg_audit statements within a SQL script and verify that auditing is enabled and working.</description>
    </item>
    
    <item>
      <title>Upgrade</title>
      <link>https://crunchydata.github.io/crunchy-containers/stable/examples/administration/upgrade/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://crunchydata.github.io/crunchy-containers/stable/examples/administration/upgrade/</guid>
      <description>Major Upgrade This example assumes you have run primary using a PG 9.5 or 9.6 image such as centos7-9.5.15-2.2.0 prior to running this upgrade.
 Starting in release 1.3.1, the upgrade container will let you perform a pg_upgrade either from a PostgreSQL version 9.5 database to 9.6 or from 9.6 to 10.
Prior to running this example, make sure your CCP_IMAGE_TAG environment variable is using the next major version of PostgreSQL that you want to upgrade to.</description>
    </item>
    
    <item>
      <title>pgAdmin 4</title>
      <link>https://crunchydata.github.io/crunchy-containers/stable/examples/administration/pgadmin4/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://crunchydata.github.io/crunchy-containers/stable/examples/administration/pgadmin4/</guid>
      <description>pgAdmin4 example This example deploys the pgadmin4 v2 web user interface for PostgreSQL without TLS.
After running the example, you should be able to browse to http://127.0.0.1:5050 and log into the web application with the following configured credentials:
 Username : admin@admin.com Password: password  If you are running this example using Kubernetes or OpenShift, it is required to use a port-forward proxy to access the dashboard.
To start the port-forward proxy run the following:</description>
    </item>
    
    <item>
      <title>Installation Guide</title>
      <link>https://crunchydata.github.io/crunchy-containers/stable/installation-guide/installation-guide/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://crunchydata.github.io/crunchy-containers/stable/installation-guide/installation-guide/</guid>
      <description>Requirements These installation instructions are developed and tested for the following operating systems:
 CentOS 7
 RHEL 7
  The Crunchy Container Suite can run on different environments including:
 Docker 1.13+
 OpenShift Container Platform 3.11
 Kubernetes 1.8+
  In this document we list the basic installation steps required for these environments.
Project Environment If your goal is to simply run the containers any properly configured user account should work.</description>
    </item>
    
    <item>
      <title>Storage Configuration</title>
      <link>https://crunchydata.github.io/crunchy-containers/stable/installation-guide/storage-configuration/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://crunchydata.github.io/crunchy-containers/stable/installation-guide/storage-configuration/</guid>
      <description>Storage Configuration Available Storage Types The Crunchy Container Suite is officially tested using two different storage backends:
 HostPath (single node testing) NFS (single and multi-node testing)  Other storage backends work as well, including GCE, EBS, ScaleIO, and others, but may require you to modify various examples or configuration.
The Crunchy Container Suite is tested, developed, and examples are provided that use the various storage types listed above. This ensures that customers have a high degree of choices when it comes to choosing a volume type.</description>
    </item>
    
    <item>
      <title>Building the Containers</title>
      <link>https://crunchydata.github.io/crunchy-containers/stable/contributing/building/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://crunchydata.github.io/crunchy-containers/stable/contributing/building/</guid>
      <description>Build From Source This section of the documentation assumes you have followed the Installation Guide. You should do the following in order to build the containers locally and be able to submit patches:
 Fork the Crunchy-Containers GitHub repository. Containers builds are installed via a Makefile. You will need to run the following commands:  cd $CCPROOT make setup make all  After this, you will have all the Crunchy containers built and are ready for use in a standalone Docker environment.</description>
    </item>
    
    <item>
      <title>Updating Documentation</title>
      <link>https://crunchydata.github.io/crunchy-containers/stable/contributing/documentation-updates/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://crunchydata.github.io/crunchy-containers/stable/contributing/documentation-updates/</guid>
      <description>Documentation &amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt; HEAD The documentation website (located at https://access.crunchydata.com/documentation/crunchy-containers/2.3.0/) is generated using link:https://gohugo.io/[Hugo] and
link:https://pages.github.com/[GitHub Pages]. The documentation website (located at https://crunchydata.github.io/crunchy-containers/) is generated using Hugo and GitHub Pages. &amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt; develop
Hosting Hugo Locally (Optional) If you would like to build the documentation locally, view the official Installing Hugo guide to set up Hugo locally.
You can then start the server by running the following commands -
cd $CCPROOT/hugo/ hugo server  The local version of the Hugo server is accessible by default from localhost:1313.</description>
    </item>
    
    <item>
      <title>Submitting Issues</title>
      <link>https://crunchydata.github.io/crunchy-containers/stable/contributing/issues/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://crunchydata.github.io/crunchy-containers/stable/contributing/issues/</guid>
      <description>If you would like to submit an feature / issue for us to consider please submit an issue to the official GitHub Repository.
If you would like to work any current or open issues, please update the issue with your efforts so that we can avoid redundant or unnecessary work.
If you have any questions, you can submit a Support - Question and Answer issue and we will work with you on how you can get more involved.</description>
    </item>
    
    <item>
      <title>Submitting Pull Requests</title>
      <link>https://crunchydata.github.io/crunchy-containers/stable/contributing/pull-requests/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://crunchydata.github.io/crunchy-containers/stable/contributing/pull-requests/</guid>
      <description>So you decided to submit an issue and work it. Great! Let&amp;rsquo;s get it merged in to the codebase. The following will go a long way to helping get the fix merged in quicker:
 Create a Pull Request from your Fork to the Develop branch. Update the checklists in the Pull Request description. Reference which issues this Pull Request is resolving.  </description>
    </item>
    
  </channel>
</rss>